#
# The version part is immutable in the name, but the package revision
# component after the dash should be kept in sync with `PKG_REV`.
# GitHub doesn't allow variables in the workflow names, so this cannot
# be automated.
#
# For new isa-l_crypto versions, rename this file with a new version
# name to restart build numbers from `1`. This is necessary because
# GitHub maintains build numbers per workflow file name.
#
name: isa-l_crypto v2.25.0-1

#
# When `publish-package` is set to `yes`, the workflow will build
# the package and publish it to nuget.org. Otherwise, a package
# will be built as an artifact and may be downloaded via GitHub UI.
#
# Published Nuget package will use the 4th version component as a
# package revision number because Nuget lacks package revision
# support.
#
# Without publishing, a Nuget package will be uploaded as an artifact
# of the workflow run and will be named using a pre-release version,
# which is an unfortunate workaround for a lack of build promotion
# support between GitHub and Nuget. This means that true pre-release
# packages will conflict with CI packages, but for this repository
# this is not an issue that will ever need to be addressed.
#
on:
  workflow_dispatch:
    inputs:
      publish-package:
        description: Publish Nuget Package (yes/no)?
        required: false

#
# For each new isa-l_crypto release, change these variables:
#
#   * PKG_VER
#   * ISACRYPTO_FNAME
#   * ISACRYPTO_DNAME
#   * ISACRYPTO_SHA256
#
# Check that the directory name within the downloaded source archive
# matches the name referenced in `ISACRYPTO_DNAME`.
#
# For each change in `PKG_VER`, `PKG_REV` must be reset to `1` (one).
#
# Package revision should be incremented by one every time package
# content is changed in any way, such as changing compiler options,
# adding or removing files, changing any text in README files, etc.
#
env:
  PKG_VER: 2.25.0
  PKG_REV: 1
  BUILD_NUMBER: ${{ github.run_number }}

  #
  # GitHub won't allow referencing `env` within this section, which
  # means that in order to reference the isa-l_crypto source directory
  # we need to concatenate variables in-place (e.g. `isa-l_crypto-${{ env.PKG_VER }}`)
  # or to define them in each step where the source directory is
  # referenced, which is what's done in this pipeline (`ISACRYPTO_DNAME`).
  #
  ISACRYPTO_FNAME: isa-l_crypto-2.25.0.tar.gz
  ISACRYPTO_DNAME: isa-l_crypto-2.25.0
  ISACRYPTO_SHA256: afe013e8eca17c9a0e567709c6a967f6b2b497d5317914afc98d5969599ee87e

  NASM_VER: 2.16.03
  NASM_FNAME: nasm-2.16.03-win64.zip
  NASM_DNAME: nasm-2.16.03
  NASM_SHA256: 3ee4782247bcb874378d02f7eab4e294a84d3d15f3f6ee2de2f47a46aa7226e6

  # for VS Community Edition, replace `Enterprise` with `Community` in the path
  VCVARSALL: '%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall'

  # Nuget Gallery (www.nuget.org) publish URL
  NUGET_PUB_URL: https://api.nuget.org/v3/index.json

defaults:
  run:
    shell: cmd

jobs:
  make-isa-l_crypto:
    name: Make isa-l_crypto
    runs-on: windows-2022
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download isa-l_crypto
      run: curl --location --output ${{ env.ISACRYPTO_FNAME }} https://github.com/intel/isa-l_crypto/archive/refs/tags/v${{ env.PKG_VER }}.tar.gz
    
    - name: Verify isa-l_crypto checksum
      run: 7z h -scrcSHA256 ${{ env.ISACRYPTO_FNAME }} | findstr /C:"SHA256 for data" | call devops\check-sha256 "${{ env.ISACRYPTO_SHA256 }}"

    - name: Download NASM
      run: curl --location --output ${{ env.NASM_FNAME }} https://www.nasm.us/pub/nasm/releasebuilds/${{ env.NASM_VER }}/win64/${{ env.NASM_FNAME }}
    
    - name: Verify NASM checksum
      run: 7z h -scrcSHA256 ${{ env.NASM_FNAME }} | findstr /C:"SHA256 for data" | call devops\check-sha256 "${{ env.NASM_SHA256 }}"

    - name: Extract isa-l_crypto
      run: |
        tar xzf ${{ env.ISACRYPTO_FNAME }}

    - name: Extract NASM
      run: |
        tar -xzf ${{ env.NASM_FNAME }}

    - name: Patch source
      working-directory: ${{ env.ISACRYPTO_DNAME }}
      run: |
        patch -p 1 --unified --input ..\patches\01-nmake-debug-release.patch

    - name: Build x64/Debug
      working-directory: ${{ env.ISACRYPTO_DNAME }}
      run: |
        call "${{ env.VCVARSALL }}" x64
        copy /Y ..\${{ env.NASM_DNAME }}\nasm.exe .

        nmake -f Makefile.nmake static CONFIG=DEBUG

        mkdir ..\nuget\build\native\lib\x64\Debug
        copy /Y isa-l_crypto_static.lib ..\nuget\build\native\lib\x64\Debug\

      # clean deletes nasm.exe as well
    - name: Clean up x64/Debug
      working-directory: ${{ env.ISACRYPTO_DNAME }}
      run: |
        call "${{ env.VCVARSALL }}" x64
        nmake -f Makefile.nmake clean

    - name: Build x64/Release
      working-directory: ${{ env.ISACRYPTO_DNAME }}
      run: |
        call "${{ env.VCVARSALL }}" x64
        copy /Y ..\%NASM_DNAME%\nasm.exe .

        nmake -f Makefile.nmake static CONFIG=RELEASE

        mkdir ..\nuget\build\native\lib\x64\Release
        copy /Y isa-l_crypto_static.lib ..\nuget\build\native\lib\x64\Release\

    - name: Collect headers and licenses
      working-directory: ${{ env.ISACRYPTO_DNAME }}
      run: |
        mkdir ..\nuget\licenses
        copy LICENSE ..\nuget\licenses\

        mkdir ..\nuget\build\native\include\
        copy /Y include\* ..\nuget\build\native\include\

      # this is an unconventional use of the pre-release version - see README.md
    - name: Make CI Nuget package
      if: ${{ github.event.inputs.publish-package != 'yes' }}
      run: |
        nuget pack nuget\StoneSteps.IsaLibCrypto.VS2022.Static.nuspec -Suffix "ci.%BUILD_NUMBER%" -Version ${{ env.PKG_VER }}.${{ env.PKG_REV }}

    - name: Upload CI Nuget package
      if: ${{ github.event.inputs.publish-package != 'yes' }}
      uses: actions/upload-artifact@v4
      with:
        name: isa-l_crypto CI Nuget package
        path: StoneSteps.IsaLibCrypto.VS2022.Static.${{ env.PKG_VER }}.${{ env.PKG_REV }}-ci.${{ env.BUILD_NUMBER }}.nupkg

      #
      # Use `-Version` explicitly to override the version in the manifest,
      # so we can usurp the 4th version component for the package revision.
      #
    - name: Make Nuget package
      if: ${{ github.event.inputs.publish-package == 'yes' }}
      run: |
        nuget pack nuget\StoneSteps.IsaLibCrypto.VS2022.Static.nuspec -Version ${{ env.PKG_VER }}.${{ env.PKG_REV }}

    - name: Publish Nuget package
      if: ${{ github.event.inputs.publish-package == 'yes' }}
      run: |
        nuget push StoneSteps.IsaLibCrypto.VS2022.Static.${{ env.PKG_VER }}.${{ env.PKG_REV }}.nupkg -Source ${{ env.NUGET_PUB_URL }} -ApiKey "${{ secrets.NUGET_API_KEY }}" -NonInteractive
